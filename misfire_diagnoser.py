import time

import obd


MISFIRE_CODES = {
    "P0300": "Random/Multiple Misfire",
    "P0301": "Cylinder 1 Misfire",
    "P0302": "Cylinder 2 Misfire",
    "P0303": "Cylinder 3 Misfire",
    "P0304": "Cylinder 4 Misfire",
}


def connect_obd():
    print("üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ OBD...")
    connection = obd.OBD()  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –ø–æ—Ä—Ç—É
    if not connection.is_connected():
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ OBD.")
        return None
    print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    return connection


def read_dtc(connection):
    print("üìñ –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—ñ–≤ –ø–æ–º–∏–ª–æ–∫...")
    dtc_response = connection.query(obd.commands.GET_DTC)
    if not dtc_response.is_null():
        return [code for code, _ in dtc_response.value]
    return []


def read_rpm_fluctuation(connection, duration=5):
    print("üìà –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ñ–ª—É–∫—Ç—É–∞—Ü—ñ–π RPM ({} —Å–µ–∫)...".format(duration))
    rpms = []
    start = time.time()
    while time.time() - start < duration:
        rpm = connection.query(obd.commands.RPM)
        if not rpm.is_null():
            rpms.append(rpm.value.magnitude)
        time.sleep(0.5)
    if not rpms:
        return 0
    avg = sum(rpms) / len(rpms)
    variance = sum((r - avg) ** 2 for r in rpms) / len(rpms)
    return variance ** 0.5  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è RPM


def diagnose_misfire(codes, rpm_fluctuation):
    if not codes:
        print("‚úÖ –ü–æ–º–∏–ª–æ–∫ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ.")
        return

    for code in codes:
        desc = MISFIRE_CODES.get(code, "Unknown DTC")
        print(f"üö® –í–∏—è–≤–ª–µ–Ω–æ {code}: {desc}")

        if code.startswith("P030") and code != "P0300":
            cyl = code[-1]
            print(f"üß© –ü—Ä–æ–ø—É—Å–∫–∏ —É —Ü–∏–ª—ñ–Ω–¥—Ä—ñ {cyl}.")

            if rpm_fluctuation > 80:
                print("‚ö†Ô∏è RPM —Å–∏–ª—å–Ω–æ –∫–æ–ª–∏–≤–∞—é—Ç—å—Å—è ‚Üí –π–º–æ–≤—ñ—Ä–Ω–æ –∫–æ—Ç—É—à–∫–∞ –∑–∞–ø–∞–ª—é–≤–∞–Ω–Ω—è.")
            else:
                print("üïØÔ∏è RPM —Å—Ç–∞–±—ñ–ª—å–Ω—ñ ‚Üí –º–æ–∂–ª–∏–≤–æ –ø—Ä–æ–±–ª–µ–º–∞ —É —Å–≤—ñ—á—Ü—ñ –∞–±–æ –∫–æ–º–ø—Ä–µ—Å—ñ—ó.")

        elif code == "P0300":
            print("üå™Ô∏è –ü—Ä–æ–ø—É—Å–∫–∏ –Ω–∞ –∫—ñ–ª—å–∫–æ—Ö —Ü–∏–ª—ñ–Ω–¥—Ä–∞—Ö ‚Üí –ø–µ—Ä–µ–≤—ñ—Ä –ø–∞–ª–∏–≤–æ, MAF –∞–±–æ –≤–∞–∫—É—É–º.")


def main():
    connection = connect_obd()
    if not connection:
        return

    codes = read_dtc(connection)
    rpm_fluct = read_rpm_fluctuation(connection)
    diagnose_misfire(codes, rpm_fluct)

if __name__ == "__main__":
    main()
